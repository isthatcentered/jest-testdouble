// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`#toHaveBeenCalled should fail if was not called 1`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).toHaveBeenCalled()[22m

Expected [test double for \\"foo\\"] to have been called.
But it was [31mnot called[39m."
`;

exports[`#toHaveBeenCalled should fail not 1`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).not.toHaveBeenCalled()[22m

Expected [test double for \\"foo\\"] to not have been called.
But it was called with:
- [31m[1][39m"
`;

exports[`#toHaveBeenCalledTimes should fail 1`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).toHaveBeenCalledTimes()[22m

Expected [test double for \\"foo\\"] to have been called 1 time, but it was called 2 times.
- [31m[1][39m
- [31m[2][39m"
`;

exports[`#toHaveBeenCalledTimes should fail with invalid time value 1`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).toHaveBeenCalledTimes()[22m

[31m\\"number\\"[39m value must be a positive integer greater than or equal to [32m0[39m.
Got has value: [31mundefined[39m"
`;

exports[`#toHaveBeenCalledTimes should fail with invalid time value 2`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).toHaveBeenCalledTimes()[22m

[31m\\"number\\"[39m value must be a positive integer greater than or equal to [32m0[39m.
Got has type:  string
Got has value: [31m\\"hey\\"[39m"
`;

exports[`#toHaveBeenCalledTimes should fail with invalid time value 3`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).toHaveBeenCalledTimes()[22m

[31m\\"number\\"[39m value must be a positive integer greater than or equal to [32m0[39m.
Got has type:  number
Got has value: [31m-1[39m"
`;

exports[`#toHaveBeenCalledTimes should fail with not 1`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).not.toHaveBeenCalledTimes()[22m

Expected [test double for \\"foo\\"] not to have been called 1 time, but it was called 1 time.
- [31m[1][39m"
`;

exports[`#toHaveBeenCalledWith should fail if was not called 1`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).toHaveBeenCalledWith()[22m

Expected [test double for \\"foo\\"] to have been called with:
[32m[1, 2][39m
But it was [31mnot called[39m."
`;

exports[`#toHaveBeenCalledWith should fail when the args does not match 1`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).toHaveBeenCalledWith()[22m

Expected [test double for \\"foo\\"] to have been called with:
[32m[1, 2][39m
But it was called with:
- [31m[1][39m
- [31m[1, 3][39m"
`;

exports[`#toHaveBeenCalledWith should fail with not 1`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).not.toHaveBeenCalledWith()[22m

Expected [test double for \\"foo\\"] to not have been called with:
[32m[1, 2][39m
But it was called with:
- [31m[1, 2][39m
- [31m[1, 3][39m"
`;

exports[`#toHaveBeenLastCalledWith should fail 1`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).toHaveBeenLastCalledWith()[22m

Expected [test double for \\"foo\\"] to have been last called with:
[32m[1][39m
But it was called with:
[31m[2][39m"
`;

exports[`#toHaveBeenLastCalledWith should fail if was not called 1`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).toHaveBeenLastCalledWith()[22m

Expected [test double for \\"foo\\"] to have been last called with:
[32m[1][39m
But it was [31mnot called[39m."
`;

exports[`#toHaveBeenLastCalledWith should fail with not 1`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).not.toHaveBeenLastCalledWith()[22m

Expected [test double for \\"foo\\"] to not have been last called with:
[32m[2][39m
But it was called with:
[31m[2][39m"
`;

exports[`#toHaveBeenNthCalledWith should fail if was not called 1`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).toHaveBeenNthCalledWith()[22m

Expected [test double for \\"foo\\"] first call to have been called with:
[32m[2][39m
But it was [31mnot called[39m."
`;

exports[`#toHaveBeenNthCalledWith should fail with args 1`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).toHaveBeenNthCalledWith()[22m

Expected [test double for \\"foo\\"] first call to have been called with:
[32m[1][39m
But it was called with:
[31m[2][39m"
`;

exports[`#toHaveBeenNthCalledWith should fail with invalid time number 1`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).toHaveBeenNthCalledWith()[22m

nth value [31m-1[39m must be a positive integer greater than [32m0[39m"
`;

exports[`#toHaveBeenNthCalledWith should fail with not 1`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).not.toHaveBeenNthCalledWith()[22m

Expected [test double for \\"foo\\"] second call to not have been called with:
[32m[2][39m
But it was called with:
[31m[2][39m"
`;

exports[`#toHaveBeenNthCalledWith should fail with nth 1`] = `
"[2mexpect([22m[31mtestDouble[39m[2m).toHaveBeenNthCalledWith()[22m

Expected [test double for \\"foo\\"] second call to have been called with:
[32m[1][39m
But it was [31mnot called[39m."
`;

exports[`#toHaveBeenNthCalledWith should fallback to jest spy matcher 1`] = `
"[2mexpect([22m[31mjest.fn()[39m[2m).toHaveBeenCalledWith([22m[32mexpected[39m[2m)[22m

Expected mock function to have been called with:
  [32m2[39m
as argument 1, but it was called with
  [31m1[39m."
`;

exports[`#toHaveBeenNthCalledWith should throw error if value is not test double or jest mock/spy 1`] = `
"[2mexpect([22m[31mreceived[39m[2m).toBeCalled()[22m

[31mreceived[39m value must be a test double, jest mock function or jest spy.
Received has type:  function
Received has value: [31m[Function foo][39m"
`;
